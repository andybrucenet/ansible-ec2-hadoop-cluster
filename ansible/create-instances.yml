---
###
#
# create-instances.yml
# Written by: Jeffrey Aven
#             Aven Solutions Pty Ltd
#             http://avensolutions.com
#
# Creates:
#   VPC, Subnets, Route Tables, Internet Gateway
#   Security Groups and Specified Hadoop and Edge Node Instances
#
###

- hosts: localhost
  connection: local
  vars_files:
  - "variables.yml"
  gather_facts: False
  
  tasks:
#
# Create subnet
#   
  - name: Create the VPC subnet
    local_action:
      module: ec2_vpc_subnet
      state: present
      aws_access_key: "{{ access_key }}"
      aws_secret_key: "{{ secret_key }}"
      az: "{{ vpc_subnet.az }}"
      cidr: "{{ vpc_subnet.cidr }}"
      region: "{{ region }}"
      resource_tags: { "Name":"{{ tag_prefix }}-HDP-Subnet" }
      validate_certs: no
      vpc_id: "{{ vpc_id }}"
    register: the_vpc_subnet

#
# Create route table
#
  - name: Create the VPC route table
    local_action:
     module: ec2_vpc_route_table
     state: present
     aws_access_key: "{{ access_key }}"
     aws_secret_key: "{{ secret_key }}"
     lookup: tag
     region: "{{ region }}"
     routes: "{{ vpc_route_table.routes }}"
     subnets: "{{ vpc_route_table.subnets }}"
     resource_tags: { "Name":"{{ tag_prefix }}-HDP-RouteTable" }
     validate_certs: no
     vpc_id: "{{ vpc_id }}"
    register: the_vpc_route_table

#
# Create Security Groups
#       
  - name: Create the Edge Node security group for the HDP Cluster
    local_action:
     module: ec2_group
     name: edgenode_sg
     description: HDP Edge Node Security Group
     purge_rules: False
     purge_rules_egress: False
     vpc_id: "{{ vpc_id }}"
     region: "{{ region }}"
     aws_access_key: "{{ access_key }}"
     aws_secret_key: "{{ secret_key }}"
     rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8080
        to_port: 8080
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8787
        to_port: 8787
        cidr_ip: 0.0.0.0/0        
      - proto: tcp
        from_port: 7180
        to_port: 7180
        cidr_ip: 0.0.0.0/0   
      - proto: tcp
        from_port: 50000
        to_port: 50100
        cidr_ip: 0.0.0.0/0
# Required for Hue
      - proto: tcp
        from_port: 8000
        to_port: 8000
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8088
        to_port: 8088
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 19888
        to_port: 19888
        cidr_ip: 0.0.0.0/0        
# Required for WANDISCO
      - proto: tcp
        from_port: 8082
        to_port: 8083
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 7000
        to_port: 7100
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 6444
        to_port: 6444
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 4321
        to_port: 4321
        cidr_ip: 0.0.0.0/0
    register: edgenode_sg

  - name: Create the Hadoop security group for the HDP Cluster
    local_action:
     module: ec2_group
     name: hadoop_sg
     description: HDP Hadoop Security Group
     purge_rules: False
     purge_rules_egress: False
     vpc_id: "{{ vpc_id }}"
     region: "{{ region }}"
     aws_access_key: "{{ access_key }}"
     aws_secret_key: "{{ secret_key }}"
     rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8042
        to_port: 8042
        cidr_ip: 0.0.0.0/0        
      - proto: all
        group_name: edgenode_sg
      - proto: all
        cidr_ip: "{{ vpc_subnet.cidr }}"
    register: hadoop_sg

  - name: Create the Master Node security group for the HDP Cluster
    local_action:
     module: ec2_group
     name: nn_sg
     description: HDP Master Node Security Group
     purge_rules: False
     purge_rules_egress: False
     vpc_id: "{{ vpc_id }}"
     region: "{{ region }}"
     aws_access_key: "{{ access_key }}"
     aws_secret_key: "{{ secret_key }}"
     rules:
      - proto: tcp
        from_port: 50070
        to_port: 50070
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 60010
        to_port: 60010
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 15000
        to_port: 15000
        cidr_ip: 0.0.0.0/0
    register: nn_sg    
    
  - name: Update Edge Node Security Group
    local_action:
     module: ec2_group
     name: edgenode_sg
     description: HDP Edge Node Security Group
     purge_rules: False
     purge_rules_egress: False
     vpc_id: "{{ vpc_id }}"
     region: "{{ region }}"
     aws_access_key: "{{ access_key }}"
     aws_secret_key: "{{ secret_key }}"
     rules:
      - proto: all
        group_name: hadoop_sg    

  - debug: var=the_vpc_subnet

#
# Create Edge Node        
#
  - name: Creating local_inventory/ansible-ec2-hadoop-cluster directory if it does not exist 
    file: path=~/.ansible/local_inventory/ansible-ec2-hadoop-cluster state=directory

  - name: Initialize hdp.hosts file
    shell: echo -e "127.0.0.1\tlocalhost" > ~/.ansible/local_inventory/ansible-ec2-hadoop-cluster/hdp.hosts 
      
  - name: Create the EC2 Instance for the Edge Node
    local_action:
     module: ec2
     aws_access_key: "{{ access_key }}"
     aws_secret_key: "{{ secret_key }}"
     region: "{{ region }}"
     key_name: "{{ pemkey_name }}"
     group_id: "{{ edgenode_sg.group_id }}"
     instance_type: "{{ edgenode_instancetype }}"
     image: "{{ imageid }}"
     vpc_subnet_id: "{{ the_vpc_subnet.subnet.id }}"
     assign_public_ip: yes
     wait: yes
     monitoring: yes
     volumes:
      - device_name: /dev/sda1
        volume_size: "{{ root_ebs_size }}"
        delete_on_termination: True
     instance_tags:
      Name: "{{ tag_prefix }}-{{ clustername }}EDGENODE"
    register: ec2_edgenode

  - name: Adding host to edgenode_instance inventory file
    shell: echo -e "{{ ec2_edgenode.instances[0].public_dns_name }}\tansible_ssh_private_key_file={{ pemkey }}\tansible_ssh_user={{ ssh_login }}\tinternalhostname={{ clustername }}EDGENODE" > ~/.ansible/local_inventory/ansible-ec2-hadoop-cluster/edgenode_instance        
    
  - name: Add edge node to hdp.hosts file
    shell: echo -e "{{ ec2_edgenode.instances[0].private_ip }}\t{{ clustername }}EDGENODE.{{ domainname }}" >> ~/.ansible/local_inventory/ansible-ec2-hadoop-cluster/hdp.hosts
    
#
# Create Master Nodes
#    

  - name: Create the EC2 Instances for the Master Nodes
    local_action:
     module: ec2
     aws_access_key: "{{ access_key }}"
     aws_secret_key: "{{ secret_key }}"
     region: "{{ region }}"
     key_name: "{{ pemkey_name }}"
     group_id: ["{{ hadoop_sg.group_id }}","{{ nn_sg.group_id }}"]
     instance_type: "{{ hdpmaster_instancetype }}"
     image: "{{ imageid }}"
     vpc_subnet_id: "{{ the_vpc_subnet.subnet.id }}"
     assign_public_ip: yes  
     wait: yes
     monitoring: yes
     volumes:
      - device_name: /dev/sda1
        volume_size: "{{ root_ebs_size }}"
        delete_on_termination: True
     instance_tags:
      Name: "{{ tag_prefix }}-{{ clustername }}MASTER{{ item }}"
    register: ec2_masters
    with_sequence: count=2
   
  - name: Remove masternode_instances file
    shell: rm -f ~/.ansible/local_inventory/ansible-ec2-hadoop-cluster/masternode_instances 
    
  - name: Adding hosts to custom inventory       
    shell: echo -e "{{ item.instances[0].public_dns_name }}\tansible_ssh_private_key_file={{ pemkey }}\tansible_ssh_user={{ ssh_login }}" >> ~/.ansible/local_inventory/ansible-ec2-hadoop-cluster/masternode_instances
    with_items: "{{ ec2_masters.results }}" 
    
  - name: Adding hostnames to inventory
    shell: cd ~/.ansible/local_inventory/ansible-ec2-hadoop-cluster;awk '{ print $0 "\tinternalhostname={{ clustername }}MASTER" FNR }' masternode_instances > masternode_instances.tmp && mv masternode_instances.tmp masternode_instances

  - name: Add master nodes to hdp.hosts file
    shell: echo -e "{{ item.1.instances[0].private_ip }}\t{{ clustername }}MASTER{{ item.0 + 1 }}.{{ domainname }}" >> ~/.ansible/local_inventory/ansible-ec2-hadoop-cluster/hdp.hosts
    with_indexed_items: "{{ ec2_masters.results }}"    

#
# Create Slave Nodes
#       

  - name: Create the EC2 Instances for the Slave Nodes
    local_action:
     module: ec2
     aws_access_key: "{{ access_key }}"
     aws_secret_key: "{{ secret_key }}"
     region: "{{ region }}"
     key_name: "{{ pemkey_name }}"
     group_id: "{{ hadoop_sg.group_id }}"
     instance_type: "{{ hdpslave_instancetype }}"
     image: "{{ imageid }}"
     vpc_subnet_id: "{{ the_vpc_subnet.subnet.id }}"
     assign_public_ip: yes  
     wait: yes
     monitoring: yes
     volumes:
      - device_name: /dev/sda1
        volume_size: "{{ root_ebs_size }}"
        delete_on_termination: True
     instance_tags:
      Name: "{{ tag_prefix }}-{{ clustername }}SLAVE{{ item }}"
    register: ec2_slaves
    with_sequence: count={{ number_of_nodes }}
    
  - name: Remove slavenode_instances file
    shell: rm -f ~/.ansible/local_inventory/ansible-ec2-hadoop-cluster/slavenode_instances 
    
  - name: Adding hosts to custom inventory       
    shell: echo -e "{{ item.instances[0].public_dns_name }}\tansible_ssh_private_key_file={{ pemkey }}\tansible_ssh_user={{ ssh_login }}" >> ~/.ansible/local_inventory/ansible-ec2-hadoop-cluster/slavenode_instances
    with_items: "{{ ec2_slaves.results }}" 
    
  - name: Adding hostnames to inventory
    shell: cd ~/.ansible/local_inventory/ansible-ec2-hadoop-cluster;awk '{ print $0 "\tinternalhostname={{ clustername }}SLAVE" FNR }' slavenode_instances > slavenode_instances.tmp && mv slavenode_instances.tmp slavenode_instances

  - name: Add slave nodes to hdp.hosts file
    shell: echo -e "{{ item.1.instances[0].private_ip }}\t{{ clustername }}SLAVE{{ item.0 + 1 }}.{{ domainname }}" >> ~/.ansible/local_inventory/ansible-ec2-hadoop-cluster/hdp.hosts
    with_indexed_items: "{{ ec2_slaves.results }}"    

# Creating Global Inventory    
    
  - name: Remove global inventory file (all_instances)
    shell: rm -f ~/.ansible/local_inventory/ansible-ec2-hadoop-cluster/all_instances 
    
  - name: Creating global inventory file (all_instances)
    shell: cd ~/.ansible/local_inventory/ansible-ec2-hadoop-cluster;cat edgenode_instance masternode_instances slavenode_instances > all_instances

