---
###
#
# configure-cluster.yml
# Installs Ambari, starts agent / server, auto initializes cluster
#
###

#
# Wait for hosts to be available
#    
- hosts: allnodes
  connection: local

  tasks:
  - name: Wait for SSH to be available on Inventory Hosts
    local_action: wait_for host={{ inventory_hostname }} port=22


#
# Common cluster configuration
#    

- hosts: allnodes
  user: "{{ ssh_login }}"
  become: true
  become_method: sudo
  vars_files:
  - "variables.yml"
  gather_facts: False

  tasks:
  - name: Copying PEM File to Instance
    copy: src="{{ pemkey }}" dest="/home/{{ ssh_login }}/{{ pemkey_name }}" owner="{{ ssh_login }}" mode=0400

  - name: Adding SSH Identity
    lineinfile: dest=/etc/ssh/ssh_config insertafter=EOF line="Host *\n\tIdentityFile /home/{{ ssh_login }}/{{ pemkey_name }}"

  - name: Copying hosts file to instance
    copy: src="~/.ansible/local_inventory/ansible-ec2-hadoop-cluster/{{ clustername }}/hdp.hosts" dest=/etc/hosts  

  - name: Create hostname in /etc/hostname
    lineinfile: dest=/etc/hostname state=present create=yes regexp='.*' line="{{ hostnameinternal }}.{{ domainname }}"

  - name: Set hostname in /etc/sysconfig/network
    lineinfile: dest=/etc/sysconfig/network create=yes state=present regexp='HOSTNAME=.*' line="HOSTNAME={{ hostnameinternal }}.{{ domainname }}"

  - name: Set hostname
    shell: hostnamectl set-hostname {{ hostnameinternal }}.{{ domainname }}

  - name: Use iptables instead of firewalld
    command: "{{ item }}"
    ignore_errors: yes
    with_items:
    - systemctl stop firewalld
    - systemctl mask firewalld
    - yum install -y iptables-services
    - systemctl disable iptables

  - name: Initial iptables config
    command: "{{ item }}"
    ignore_errors: yes
    with_items:
    - systemctl start iptables

  - name: Stop iptables
    service: name=iptables state=stopped

  - name: Stop iptables6
    service: name=ip6tables state=stopped

  - name: Disabling SELinux
    lineinfile: dest=/etc/sysconfig/selinux regexp=^SELINUX= line=SELINUX=disabled

  - name: Disable SElinux permanently
    lineinfile: dest=/etc/selinux/config state=present create=no regexp='SELINUX=.*' line='SELINUX=disabled'

  - name: Install NTP
    yum:
      pkg: ntp
      state: installed

  - name: Start NTP
    service: name=ntpd state=restarted

  - name: Set networking yes
    lineinfile: dest=/etc/sysconfig/network create=yes state=present regexp='NETWORKING=.*' line='NETWORKING=yes'

  - name: Install wget
    yum:
      pkg: wget
      state: installed

  - name: Install epel
    yum:
      pkg: epel-release
      state: installed

  - name: Install screen
    yum:
      pkg: screen
      state: installed

#
# UI server
- hosts: ui
  user: "{{ ssh_login }}"
  become: true
  become_method: sudo
  vars_files:
  - "variables.yml"
  gather_facts: False

  tasks:
  - name: Setup UI desktop
    command: "{{ item }}"
    ignore_errors: yes
    with_items:
    - yum -y groupinstall "X Window System"
    - yum -y install gnome-classic-session gnome-terminal-nautilus control-center liberation-mono-fonts
    - unlink /etc/systemd/system/default.target
    - ln -sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target
    - yum -y install tigervnc-server firefox

  - name: Create UI login user
    user:
      name: l.login
      comment: "Login User"
      shell: /bin/bash
      password: "{{ ui_password_login }}"

  - name: Restart UI server
    shell: sleep 5 && shutdown -r now
    async: 1
    poll: 0
    ignore_errors: true

#
# Install R on first data node (for setting up failing test)
- hosts: data1
  user: "{{ ssh_login }}"
  become: true
  become_method: sudo
  vars_files:
  - "variables.yml"
  gather_facts: False

  tasks:
  - name: Install R
    yum:
      pkg: R
      state: installed

#
# Wait for UI host to be available
#    
- hosts: ui
  connection: local

  tasks:
  - name: Wait for UI server to restart
    local_action: wait_for host={{ inventory_hostname }} port=22 delay=30 timeout=300 connect_timeout=15

- hosts: ui
  user: "{{ ssh_login }}"
  become: true
  become_method: sudo
  vars_files:
  - "variables.yml"
  gather_facts: False

  tasks:
  - name: Copying PEM File to Instance for UI login user
    copy: src="{{ pemkey }}" dest="/home/l.login/{{ pemkey_name }}" owner="l.login" mode=0400

  - name: VNC Server Setup Script
    copy: src="{{ topfolder }}/scripts/{{ item }}" dest="/home/{{ ssh_login }}/{{ item }}" owner="{{ ssh_login }}" mode=0550
    with_items:
    - setup-vncserver.sh

  - name: Ensure VNC Server is running
    shell: ./setup-vncserver.sh l.login "{{ ui_password_vnc }}"

#
# Ambari servers
- hosts: master:data:tools:edge:extra
  user: "{{ ssh_login }}"
  become: true
  become_method: sudo
  vars_files:
  - "variables.yml"
  gather_facts: False

  tasks:
  - name: Install jq
    yum:
      pkg: jq
      state: installed

  - name: Download Oracle JDK
    shell: "wget --no-cookies --no-check-certificate --header 'Cookie: oraclelicense=accept-securebackup-cookie' '{{ oracle_jdk_download }}' -O /opt/jdk-linux-x64.rpm"
    args:
      creates: /opt/jdk-linux-x64.rpm

  - name: Install Oracle JDK
    shell: yum localinstall -y /opt/jdk-linux-x64.rpm

  - name: Pull stress test
    shell: "wget --no-cookies --no-check-certificate '{{ stress_download }}' -O /opt/stress.rpm"
    args:
      creates: /opt/stress.rpm

  - name: Install stress test
    shell: yum localinstall -y /opt/stress.rpm

  - name: Write out alternatives file
    template: src=../templates/java_alternatives.j2 dest=/tmp/java_alternatives.sh

  - name: Setting alternatives
    shell: sh /tmp/java_alternatives.sh

  - name: Remove previous links for jps
    shell: rm -f /usr/bin/jps  

  - name: Set jps in path
    shell: ln -s `sudo find / -name jps | grep jdk | tail -n 1` /usr/bin/jps  

  # Download/Install Ambari Repo and Agent    
  - name: Create Ambari Repo
    get_url: url={{ hdp_ambari_repo }} dest=/etc/yum.repos.d/ambari.repo

  - name: Install Ambari agent
    yum:
      pkg: ambari-agent
      state: installed

  - name: Start Ambari agent
    service: name=ambari-agent state=restarted

#
# Install and Start Ambari Server       
#    
- hosts: edge
  user: "{{ ssh_login }}"
  become: true
  become_method: sudo
  vars_files:
  - "variables.yml"
  gather_facts: False

  tasks:
  - name: Install Ambari server
    yum:
      pkg: ambari-server
      state: installed

  - name: Configure Ambari server
    command: ambari-server setup -s

  - name: Start Ambari server
    service: name=ambari-server state=restarted   

  - name: Wait for Ambari server
    shell: sh -c "l_count=$(ss -tln '( sport = :8080 )' | grep -e '^LISTEN' | head -n 1 | wc -l); [[ l_count -eq 1 ]] && true"
    register: wait_ambari_server
    until: wait_ambari_server.rc == 0
    retries: 120
    delay: 5

  - debug: msg="Ambari Server is ready"

#
# Configure Ambari Agent on all Nodes
#    
- hosts: master:data:tools
  user: "{{ ssh_login }}"
  become: true
  become_method: sudo
  vars_files:
  - "variables.yml"
  gather_facts: False

  tasks:
  - name: Configure Ambari server name on each agent
    ini_file:
     dest: /etc/ambari-agent/conf/ambari-agent.ini
     section: server
     option: hostname
     value: "edge.{{ domainname }}"

  - name: Restart Ambari agent
    service: name=ambari-agent state=restarted

  - debug: msg="Ambari Agents reconfigured"

#
# Wait for cluster to initialize
#    
- hosts: edge
  user: "{{ ssh_login }}"
  become: true
  become_method: sudo
  vars_files:
  - "variables.yml"
  gather_facts: False

  tasks:
  - name: Wait for Ambari agents to register
    shell: sh -c "l_hosts=$(curl --silent -H 'X-Requested-By{{ ':' }} ambari' -X GET -u admin{{ ':' }}admin http{{ ':' }}//localhost{{ ':' }}8080/api/v1/hosts | jq '.items | length') ; [[ l_hosts -eq {{ number_of_nodes }}+4 ]] && true"
    register: wait_ambari_agents
    until: wait_ambari_agents.rc == 0
    retries: 120
    delay: 5

  - name: Copying Ambari blueprint
    copy: src="{{ topfolder }}/blueprints/{{ blueprint }}.blueprint" dest="/home/{{ ssh_login }}/{{ blueprint }}.blueprint" owner="{{ ssh_login }}" mode=0400

  - name: Register Ambari blueprint
    shell: sh -c "curl --silent -H 'X-Requested-By{{ ':' }} ambari' -X POST -u admin{{ ':' }}admin http{{ ':' }}//localhost{{ ':' }}8080/api/v1/blueprints/{{ blueprint }}.blueprint -d@./{{ blueprint }}.blueprint"

  - name: Copy blueprint map template to remote
    template: src="{{ topfolder }}/blueprints/{{ blueprint }}.map" dest="./{{ blueprint }}.map" owner="{{ ssh_login }}" mode=0640

  - name: Create Ambari cluster from blueprint
    shell: sh -c "curl --silent -H 'X-Requested-By{{ ':' }} ambari' -X POST -u admin{{ ':' }}admin http{{ ':' }}//localhost{{ ':' }}8080/api/v1/clusters/{{ clustername }} -d@./{{ blueprint }}.map"

  - debug: msg="Ambari Server available at http://{{ inventory_hostname }}:8080"

