---
- hosts: allnodes
  name: Gather all facts
  vars_files:
  - "variables.yml"
  tasks: [ ]

#
# Ambari servers
- hosts: master:data:tools:edge:extra
  user: "{{ ssh_login }}"
  become: true
  become_method: sudo
  vars_files:
  - "variables.yml"
  gather_facts: False

  tasks:
  - name: Install jq
    yum:
      pkg: jq
      state: installed

  # Install Oracle JDK
  - name: Download Oracle JDK
    shell: "wget --no-cookies --no-check-certificate --header 'Cookie: oraclelicense=accept-securebackup-cookie' '{{ oracle_jdk_download }}' -O /opt/jdk-linux-x64.rpm"
    args:
      creates: /opt/jdk-linux-x64.rpm

  - name: Install Oracle JDK
    shell: yum localinstall -y /opt/jdk-linux-x64.rpm

  - name: Write out alternatives file
    template: src=../templates/java_alternatives.j2 dest=/tmp/java_alternatives.sh

  - name: Setting alternatives
    shell: sh /tmp/java_alternatives.sh

  - name: Remove previous links for jps
    shell: rm -f /usr/bin/jps  

  - name: Set jps in path
    shell: ln -s `sudo find / -name jps | grep jdk` /usr/bin/jps  

  # Download/Install Ambari Repo and Agent    
  - name: Create Ambari Repo
    get_url: url={{ hdp_ambari_repo }} dest=/etc/yum.repos.d/ambari.repo

  - name: Install Ambari agent
    yum:
      pkg: ambari-agent
      state: installed

  - name: Start Ambari agent
    service: name=ambari-agent state=restarted

#
# Install and Start Ambari Server       
#    
- hosts: edge
  user: "{{ ssh_login }}"
  become: true
  become_method: sudo
  vars_files:
  - "variables.yml"
  gather_facts: False

  tasks:
  - name: Install Ambari server
    yum:
      pkg: ambari-server
      state: installed

  - name: Configure Ambari server
    command: ambari-server setup -s

  - name: Start Ambari server
    service: name=ambari-server state=restarted   

  - name: Wait for Ambari server
    shell: sh -c "l_count=$(ss -tln '( sport = :8080 )' | grep -e '^LISTEN' | head -n 1 | wc -l); [[ l_count -eq 1 ]] && true"
    register: wait_ambari_server
    until: wait_ambari_server.rc == 0
    retries: 120
    delay: 5

  - debug: msg="Ambari Server is ready"

#
# Configure Ambari Agent on all Nodes
#    
- hosts: master:data:tools
  user: "{{ ssh_login }}"
  become: true
  become_method: sudo
  vars_files:
  - "variables.yml"
  gather_facts: False

  tasks:
  - name: Configure Ambari server name on each agent
    ini_file:
     dest: /etc/ambari-agent/conf/ambari-agent.ini
     section: server
     option: hostname
     value: "edge.{{ domainname }}"

  - name: Restart Ambari agent
    service: name=ambari-agent state=restarted

  - debug: msg="Ambari Agents reconfigured"

#
# Wait for cluster to initialize
#    
- hosts: edge
  user: "{{ ssh_login }}"
  become: true
  become_method: sudo
  vars_files:
  - "variables.yml"
  gather_facts: False

  tasks:
  - name: Wait for Ambari agents to register
    shell: sh -c "l_hosts=$(curl --silent -H 'X-Requested-By{{ ':' }} ambari' -X GET -u admin{{ ':' }}admin http{{ ':' }}//localhost{{ ':' }}8080/api/v1/hosts | jq '.items | length') ; [[ l_hosts -eq {{ number_of_nodes }}+4 ]] && true"
    register: wait_ambari_agents
    until: wait_ambari_agents.rc == 0
    retries: 100
    delay: 5

  - name: Copying Ambari blueprint
    copy: src="{{ topfolder }}/blueprints/{{ blueprint }}.blueprint" dest="/home/{{ ssh_login }}/{{ blueprint }}.blueprint" owner="{{ ssh_login }}" mode=0400

  - name: Register Ambari blueprint
    shell: sh -c "curl --silent -H 'X-Requested-By{{ ':' }} ambari' -X POST -u admin{{ ':' }}admin http{{ ':' }}//localhost{{ ':' }}8080/api/v1/blueprints/{{ blueprint }}.blueprint -d@./{{ blueprint }}.blueprint"

  - name: Copy blueprint map template to remote
    template: src="{{ topfolder }}/blueprints/{{ blueprint }}.map" dest="./{{ blueprint }}.map" owner="{{ ssh_login }}" mode=0640

  - name: Create Ambari cluster from blueprint
    shell: sh -c "curl --silent -H 'X-Requested-By{{ ':' }} ambari' -X POST -u admin{{ ':' }}admin http{{ ':' }}//localhost{{ ':' }}8080/api/v1/clusters/{{ clustername }} -d@./{{ blueprint }}.map"

  - debug: msg="Ambari Server available at http://{{ inventory_hostname }}:8080"

